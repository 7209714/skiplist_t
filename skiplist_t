#include<stdio.h>
#include<iostream>
#include<time.h>
using namespace std;

template<typename T>
class SkipList
{
public:
	SkipList() : level(1)
	{
		Listhead = new Node();
		nodeSum = 1;
	}
	/* 跳躍表銷燬 */
	~SkipList();

	/* 插入元素 */
	void insert(const T& val);

	/* 刪除元素 */
	void remove(const T& val);

	/* 查詢元素 */
	bool search(const T& val);

	/* 產生隨機值 */
	bool randomVal();

	/* 層序遍歷跳躍表 */
	void print();
private:
	struct Node
	{
		Node(T data = T())
			:_data(data)
			, _up(nullptr)
			, _down(nullptr)
			, _left(nullptr)
			, _right(nullptr)
		{}
		T _data;
		Node* _up;
		Node* _down;
		Node* _left;
		Node* _right;
	};
	Node* Listhead; // 跳躍表頭節點
	int level; // 跳躍表的層數
	int nodeSum; // 跳躍表的結點個數
};

static unsigned int seed = NULL; // 隨機

template<typename T>
/* 產生隨機值 */
bool SkipList<T>::randomVal()
{
	if (seed == NULL)
		seed = (unsigned)time(NULL);

	srand(seed);
	int K = rand() % 2;  // 兩種情況
	seed = rand();
	if (K == 0)
		return true;
	else
		return false;
}
template<typename T>
/* 插入元素 */
void SkipList<T>::insert(const T& val)
{
	Node* curNode = Listhead;
	/* 向下走到最底層Level 1 */
	while (curNode->_down != nullptr)
	{
		curNode = curNode->_down;
	}

	Node* curHead = curNode;
	Node* newNode = nullptr;
	/* 尋找合適位置進行插入 */
	while (curNode->_right != nullptr)
	{
		/* 待插入元素小於表中節點值 */
		if (val < curNode->_right->_data)
		{
			newNode = new Node(val);
			newNode->_right = curNode->_right;
			curNode->_right->_left = newNode;

			curNode->_right = newNode;
			newNode->_left = curNode; // 更新新節點的left

			break;
		}
		/* 待插入元素等於表中節點值，不進行插入 */
		else if (val == curNode->_right->_data)
		{
			return;
		}
		curNode = curNode->_right;
	}

	/* 遍歷到末節點也沒有合適位置，直接插入到鏈表末尾即可 */
	if (newNode == nullptr)
	{
		newNode = new Node(val);
		curNode->_right = newNode;
		newNode->_left = curNode;
	}

	/* 限制升維最高升一層，防止不斷升層，浪費空間 */
	int maxLevel = level + 1;

	int curLevel = 1;
	/* 根據拋硬幣產生的隨機值決定是否將該元素添加至跳躍層 */
	while (randomVal())
	{
		/* 跳躍表層數不能超過最大限制，防止不斷升層 */
		if (level > maxLevel)
		{
			return;
		}

		curLevel++;

		/* 是否要進行升維，此操作每添加一個元素最多執行一次 */
		if (level < curLevel)
		{
			level++; // 跳躍表的層數增加
			Node* newHead = new Node();
			newHead->_down = Listhead;
			Listhead->_up = newHead; // 更新up結點
			Listhead = newHead; // 使Listhead指向當前新結點
		}

		// curHead升一層（要麼進行了升維，要麼本來層數就大於1）
		curHead = curHead->_up;
		curNode = curHead;

		/* 將新插入的結點繼續添加到跳躍層中，搜尋算法與Level 1層相同 */
		Node* skipNode = nullptr;
		while (curNode->_right != nullptr)
		{
			if (val < curNode->_right->_data &&
				skipNode == nullptr)
			{
				skipNode = new Node(val);
				skipNode->_right = curNode->_right;
				curNode->_right->_left = skipNode;

				curNode->_right = skipNode;
				skipNode->_left = curNode; // 更新left指針域
			}
			curNode = curNode->_right;
		}

		/* 該跳躍層沒有結點，即上述升維後的結果。將新結點添加到新產生的跳躍層 */
		if (skipNode == nullptr)
		{
			skipNode = new Node(val);
			curNode->_right = skipNode;
			skipNode->_left = curNode; // 更新left指針域
		}

		/*
		 * 將基礎層和跳躍層 或 跳躍層與跳躍層 中新插入的結點串聯起來
		 * newNode初始是Level 1層中新插入的結點
		 * 我們需要使newNode走向其值存在的最高層（垂直關係）
		 */
		while (newNode->_up != nullptr)
		{
			newNode = newNode->_up;
		}
		skipNode->_down = newNode; // 更新跳躍結點的down指針域
		newNode->_up = skipNode; // 更新newNode的up指針域

		/* 保證在一層只有一個元素的情況下，不會再向上擴層 */
		if (curHead->_right == skipNode)
		{
			return;
		}
	}
}
template<typename T>
/* 查詢元素 */
bool SkipList<T>::search(const T& val)
{
	/* 從首層結點開始 */
	Node* preNode = Listhead;
	Node* curNode = preNode->_right;

	while (true)
	{
		if (curNode != nullptr)
		{
			/* 要查詢的val大，在本層向右遍歷 */
			if (curNode->_data < val)
			{
				preNode = curNode;
				curNode = curNode->_right;
				continue;
			}
			/* 找到要查詢的元素 */
			else if (val == curNode->_data)
			{
				return true;
			}
		}
		/* 判斷是否將所有層都遍歷完 */
		if (preNode->_down == nullptr)
		{
			return false;
		}

		/* 繼續向下層遍歷 */
		preNode = preNode->_down;
		curNode = preNode->_right;
	}
}
template<typename T>
/* 刪除元素 */
void SkipList<T>::remove(const T& val)
{
	/* 首先查詢待刪除元素是否在跳躍表中，查詢方式和上述查詢元素方法相同 */
	Node* preNode = Listhead;
	Node* curNode = preNode->_right;

	while (true)
	{
		if (curNode != nullptr)
		{
			/* 待刪除的val值大，在本層向右遍歷 */
			if (curNode->_data < val)
			{
				preNode = curNode;
				curNode = curNode->_right;
				continue;
			}
			/* 找到要刪除的元素位置，跳出循環進行後續操作 */
			else if (curNode->_data == val)
			{
				break;
			}
		}
		/* 判斷是否將所有層都遍歷完 */
		if (preNode->_down == nullptr)
		{
			break;
		}
		/* 繼續向下層遍歷 */
		preNode = preNode->_down;
		curNode = preNode->_right;
	}

	/* 判斷是否查詢到了待刪除的元素 */
	if (curNode == nullptr)
	{
		return;
	}

	/* 從找到的位置開始垂直刪除元素 */
	while (curNode != nullptr)
	{
		Node* delNode = curNode;
		/* 找到待刪除元素的前驅結點 */
		preNode = curNode->_left;
		/* 將待刪除元素的左右結點串聯起來 */
		preNode->_right = curNode->_right;
		if (curNode->_right != nullptr)
		{
			/* 更新左指針域 */
			curNode->_right->_left = preNode;
		}
		/* 垂直向下層進行刪除 */
		curNode = curNode->_down;

		delete delNode;
		delNode = nullptr;
	}

	/**
	 * 若將該結點刪除後，本層已經沒有元素，那麼需要更新層數，並將該層釋放
	 * 我們採取自上而下的方式進行逐層判斷
	 */
	Node* head = Listhead;
	while (head->_right == nullptr && head->_down != nullptr)
	{
		level--; /* 更新跳躍表的層數 */
		Node* delNode = head;
		head = head->_down;

		delete delNode;
		delNode = nullptr;
	}
	Listhead = head; /* 更新跳躍表頭節點ListHead */
}
template<typename T>
SkipList<T>::~SkipList()
{
	Node* head = Listhead;
	Node* delNode = nullptr;
	while (head != nullptr)
	{
		/* 釋放本層元素 */
		Node* curNode = head->_right;
		while (curNode != nullptr)
		{
			delNode = curNode;
			curNode = delNode->_right;
			delete delNode;
			delNode = nullptr;
		}

		/* 釋放頭節點，並使head指針指向下一層，準備釋放下一層的元素 */
		delNode = head;
		head = head->_down;
		delete delNode;
	}
}
template<typename T>
/* 按層打印跳躍表 */
void SkipList<T>::print()
{
	cout << "level = " << level << endl;
	Node* head = Listhead;
	while (head != nullptr)
	{
		Node* curNode = head->_right;
		while (curNode != nullptr)
		{
			cout << curNode->_data << " ";
			curNode = curNode->_right;
		}
		cout << endl;
		/* 跳到下一層 */
		head = head->_down;
	}
}

int main()
{
	SkipList<int> a;
	int i = 1;
	while (i <= 100000000)
	{
		a.insert(i);
		if (i % 10000==0)
		{
			a.print();
		}
		

		i++;
	}
	
	system("pause");
}
